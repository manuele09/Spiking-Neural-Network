using System;
using System.Collections.Generic;
using System.Text;

namespace SLN
{
    [Serializable]
    class SynapseSameness : Synapse
    {

        /// <summary>
		/// Constructor (with the same excitation weights specified)
		/// </summary>
		/// <param name="start">The starting neuron</param>
		/// <param name="dest">The destination neuron</param>
		/// <param name="w">The synaptic weight</param>
		/// <param name="tau">The synapse time constant</param>
		/// <param name="delay">The synaptic delay (in steps of simulation)</param>
		/// <param name="gain">Gain in the calculation of the current</param>
		internal SynapseSameness(Neuron start, Neuron dest, double w, double tau, int delay, double gain)
			: base(start, dest, w, w, tau, delay, gain)
		{ }

        /// <summary>
        /// Simulates the synapse
        /// </summary>
        /// <param name="step">The current simulation step</param>
        internal new double simulate(int step)
        {

            double I = 0;

            //Calculating the current generated by each spike of the starting neuron
            for (int k = 1; k < Start.NSpikes; k++)
            {
                int tspk = Start.getSpikeAt(k);
                if (tspk <= step) // Necessary in the learning phase
                {
                    double t = (Constants.INTEGRATION_STEP) * (step - tspk + Delay);
                    double Itmp = _gain * (t / Tau) * Math.Exp(1 - t / Tau);
                    I += Itmp;
                }
            }

            //update the output current of the start neuron
            this.Start._iOut = I;

            //if (step <= Constants.LOCAL_EXCITATORY_WINDOW || (step >= Constants.SIMULATION_STEPS_DETOUR && step <= Constants.LOCAL_EXCITATORY_WINDOW + Constants.SIMULATION_STEPS_DETOUR))
            //if (step <= Constants.LOCAL_EXCITATORY_WINDOW)
            I *= W;
            //else
            //    I *= Wsec;

            //Forwarding the current to the destination neuron
            Dest.updateI(I);
            //Saving the current for debugging purposes
            _Iprev = I;

            //if (Dest.COLUMN == 1 && Dest.ROW == 0 && Dest.LAYER == LayerNumbers.SOSL_1)
            //{
            //    //Dest.file.WriteLine(step + "\t" + I);
            //    //Dest.file.Flush();
            //    return I;
            //}
            //else 

            return 0;


        }

    }
}
